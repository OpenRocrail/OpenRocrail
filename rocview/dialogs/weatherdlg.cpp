/* Rocrail - Model Railroad Software Copyright (C) 2002-2014 Rob Versluis, Rocrail.net This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.*/#include "weatherdlg.h"#include "rocview/public/guiapp.h"#include "rocrail/wrapper/public/Weather.h"#include "rocrail/wrapper/public/Sunrise.h"#include "rocrail/wrapper/public/Sunset.h"#include "rocrail/wrapper/public/Night.h"#include "rocrail/wrapper/public/Output.h"#include "rocrail/wrapper/public/ModelCmd.h"WeatherDlg::WeatherDlg( wxWindow* parent, iONode props ):WeatherDlgGen( parent ){  m_Props = props;  initLabels();  GetSizer()->Fit(this);  GetSizer()->SetSizeHints(this);  GetSizer()->Layout();  initValues();}void WeatherDlg::onCancel( wxCommandEvent& event ){  EndModal(0);}void WeatherDlg::initLabels() {  SetTitle(wxGetApp().getMsg( "weather" ));  m_WeatherBook->SetPageText( 0, wxGetApp().getMsg( "day" ) );  m_WeatherBook->SetPageText( 1, wxGetApp().getMsg( "night" ) );  m_SunriseBox->GetStaticBox()->SetLabel( wxGetApp().getMsg( "sunrise" ) );  m_SunsetBox->GetStaticBox()->SetLabel( wxGetApp().getMsg( "sunset" ) );  m_labOutputs->SetLabel( wxGetApp().getMsg( "outputs" ) );  m_labMaxBri->SetLabel( wxGetApp().getMsg( "maxbri" ) );  m_SlidingDaylight->SetLabel( wxGetApp().getMsg( "slidingdaylight" ) );  m_labSunriseTime->SetLabel( wxGetApp().getMsg( "time" ) );  m_labSunsetTime->SetLabel( wxGetApp().getMsg( "time" ) );  m_labRGBSunrise->SetLabel( wxGetApp().getMsg( "rgb" ) );  m_labRGBSunset->SetLabel( wxGetApp().getMsg( "rgb" ) );  m_labOutputsNight->SetLabel( wxGetApp().getMsg( "outputs" ) );  m_labBrightnessNight->SetLabel( wxGetApp().getMsg( "brightness" ) );}void WeatherDlg::initValues() {  m_Outputs->SetValue( wxString(wWeather.getoutputs(m_Props),wxConvUTF8) );  m_MaxBri->SetValue( wWeather.getmaxbri(m_Props) );  m_SlidingDaylight->SetValue(wWeather.isslidingdaylight(m_Props)?true:false);  iONode sunrise = wWeather.getsunrise(m_Props);  if( sunrise == NULL ) {    sunrise = NodeOp.inst(wSunrise.name(), m_Props, ELEMENT_NODE );    NodeOp.addChild(m_Props, sunrise);  }  m_SunriseHour->SetValue( wSunrise.gethour( sunrise ) );  m_SunriseMin->SetValue( wSunrise.getminute( sunrise ) );  m_SunriseRed->SetValue( wSunrise.getred( sunrise ) );  m_SunriseGreen->SetValue( wSunrise.getgreen( sunrise ) );  m_SunriseBlue->SetValue( wSunrise.getblue( sunrise ) );  iONode sunset = wWeather.getsunset(m_Props);  if( sunset == NULL ) {    sunset = NodeOp.inst(wSunset.name(), m_Props, ELEMENT_NODE );    NodeOp.addChild(m_Props, sunset);  }  m_SunsetHour->SetValue( wSunset.gethour( sunset ) );  m_SunsetMin->SetValue( wSunset.getminute( sunset ) );  m_SunsetRed->SetValue( wSunset.getred( sunset ) );  m_SunsetGreen->SetValue( wSunset.getgreen( sunset ) );  m_SunsetBlue->SetValue( wSunset.getblue( sunset ) );  iONode night = wWeather.getnight(m_Props);  if( night == NULL ) {    night = NodeOp.inst(wNight.name(), m_Props, ELEMENT_NODE );    NodeOp.addChild(m_Props, night);  }  m_OutputsNight->SetValue( wxString(wNight.getoutputs(night),wxConvUTF8) );  m_BrightnessNight->SetValue( wNight.getbri(night) );  m_RedNight->SetValue( wNight.getred(night) );  m_GreenNight->SetValue( wNight.getgreen(night) );  m_BlueNight->SetValue( wNight.getblue(night) );}bool WeatherDlg::evaluate() {  wWeather.setoutputs( m_Props, m_Outputs->GetValue().mb_str(wxConvUTF8) );  wWeather.setmaxbri(m_Props, m_MaxBri->GetValue() );  wWeather.setslidingdaylight(m_Props, m_SlidingDaylight->IsChecked()?True:False);  iONode sunrise = wWeather.getsunrise(m_Props);  wSunrise.sethour( sunrise, m_SunriseHour->GetValue() );  wSunrise.setminute( sunrise, m_SunriseMin->GetValue() );  wSunrise.setred( sunrise, m_SunriseRed->GetValue() );  wSunrise.setgreen( sunrise, m_SunriseGreen->GetValue() );  wSunrise.setblue( sunrise, m_SunriseBlue->GetValue() );  iONode sunset = wWeather.getsunset(m_Props);  wSunset.sethour( sunset, m_SunsetHour->GetValue() );  wSunset.setminute( sunset, m_SunsetMin->GetValue() );  wSunset.setred( sunset, m_SunsetRed->GetValue() );  wSunset.setgreen( sunset, m_SunsetGreen->GetValue() );  wSunset.setblue( sunset, m_SunsetBlue->GetValue() );  iONode night = wWeather.getnight(m_Props);  wNight.setoutputs( night, m_OutputsNight->GetValue().mb_str(wxConvUTF8) );  wNight.setbri(night, m_BrightnessNight->GetValue() );  wNight.setred(night, m_RedNight->GetValue() );  wNight.setgreen(night, m_GreenNight->GetValue() );  wNight.setblue(night, m_BlueNight->GetValue() );  return true;}void WeatherDlg::onOK( wxCommandEvent& event ){  evaluate();  if( !wxGetApp().isStayOffline() ) {    /* Notify RocRail. */    iONode cmd = NodeOp.inst( wModelCmd.name(), NULL, ELEMENT_NODE );    wModelCmd.setcmd( cmd, wModelCmd.modify );    NodeOp.addChild( cmd, (iONode)NodeOp.base.clone( m_Props ) );    wxGetApp().sendToRocrail( cmd );    cmd->base.del(cmd);  }  else {    wxGetApp().setLocalModelModified(true);  }  EndModal( wxID_OK );}void WeatherDlg::onHelp( wxCommandEvent& event ) {  wxGetApp().openLink( "weather" );}