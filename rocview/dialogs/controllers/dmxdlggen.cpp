///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version Sep 12 2010)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "dmxdlggen.h"///////////////////////////////////////////////////////////////////////////dmxdlggen::dmxdlggen( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* bSizer9;	bSizer9 = new wxBoxSizer( wxVERTICAL );		wxFlexGridSizer* fgSizer11;	fgSizer11 = new wxFlexGridSizer( 0, 2, 0, 0 );	fgSizer11->AddGrowableCol( 1 );	fgSizer11->SetFlexibleDirection( wxBOTH );	fgSizer11->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_labIID = new wxStaticText( this, wxID_ANY, wxT("IID"), wxDefaultPosition, wxDefaultSize, 0 );	m_labIID->Wrap( -1 );	fgSizer11->Add( m_labIID, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );		m_IID = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );	fgSizer11->Add( m_IID, 0, wxALL|wxEXPAND, 5 );		m_labHost = new wxStaticText( this, wxID_ANY, wxT("Hostname"), wxDefaultPosition, wxDefaultSize, 0 );	m_labHost->Wrap( -1 );	fgSizer11->Add( m_labHost, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 5 );		m_Host = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );	m_Host->SetMinSize( wxSize( 160,-1 ) );		fgSizer11->Add( m_Host, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxEXPAND, 5 );		m_labDeviceChannels = new wxStaticText( this, wxID_ANY, wxT("Device channels"), wxDefaultPosition, wxDefaultSize, 0 );	m_labDeviceChannels->Wrap( -1 );	fgSizer11->Add( m_labDeviceChannels, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 5 );		m_DeviceChannels = new wxSpinCtrl( this, wxID_ANY, wxT("6"), wxDefaultPosition, wxSize( 80,-1 ), wxSP_ARROW_KEYS, 3, 6, 6 );	fgSizer11->Add( m_DeviceChannels, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxLEFT, 5 );		bSizer9->Add( fgSizer11, 1, wxEXPAND, 5 );		m_stdButtons = new wxStdDialogButtonSizer();	m_stdButtonsOK = new wxButton( this, wxID_OK );	m_stdButtons->AddButton( m_stdButtonsOK );	m_stdButtonsCancel = new wxButton( this, wxID_CANCEL );	m_stdButtons->AddButton( m_stdButtonsCancel );	m_stdButtonsHelp = new wxButton( this, wxID_HELP );	m_stdButtons->AddButton( m_stdButtonsHelp );	m_stdButtons->Realize();	bSizer9->Add( m_stdButtons, 0, wxEXPAND|wxALL, 5 );		this->SetSizer( bSizer9 );	this->Layout();	bSizer9->Fit( this );		this->Centre( wxBOTH );		// Connect Events	m_stdButtonsCancel->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( dmxdlggen::onCancel ), NULL, this );	m_stdButtonsHelp->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( dmxdlggen::onHelp ), NULL, this );	m_stdButtonsOK->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( dmxdlggen::onOK ), NULL, this );}dmxdlggen::~dmxdlggen(){	// Disconnect Events	m_stdButtonsCancel->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( dmxdlggen::onCancel ), NULL, this );	m_stdButtonsHelp->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( dmxdlggen::onHelp ), NULL, this );	m_stdButtonsOK->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( dmxdlggen::onOK ), NULL, this );	}